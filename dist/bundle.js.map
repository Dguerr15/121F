{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://121f/./src/Scenes/farming.ts","webpack://121f/webpack/bootstrap","webpack://121f/webpack/runtime/define property getters","webpack://121f/webpack/runtime/hasOwnProperty shorthand","webpack://121f/webpack/runtime/make namespace object","webpack://121f/./src/main.ts"],"sourcesContent":["\r\n// Placeholder type definitions for external references\r\ndeclare const game: { config: { width: number; height: number } };\r\ndeclare const my: {\r\n    eventMan: EventManager;\r\n    gridManager: GridManager;\r\n    commandMan: CommandManager;\r\n    inventory: Record<string, number>;\r\n    scene: Phaser.Scene;\r\n    sprite: {\r\n        ground?: Phaser.GameObjects.Sprite;\r\n        player?: Phaser.Physics.Arcade.Sprite;\r\n    };\r\n    text: {\r\n        dayCount?: Phaser.GameObjects.Text;\r\n        inventory?: Phaser.GameObjects.Text;\r\n        inventoryItems?: Record<string, Phaser.GameObjects.Text>;\r\n        message?: Phaser.GameObjects.Text;\r\n        winMessage?: Phaser.GameObjects.Text;\r\n    };\r\n};\r\n\r\n// Placeholder imports or declarations for classes and enums that you reference\r\n// You need to import or define these classes and enums from your actual project.\r\nclass EventManager {\r\n    constructor(scene: Phaser.Scene) {}\r\n    saveGame(slot: string): void {}\r\n    loadGame(slot: string): void {}\r\n}\r\nclass ScenarioManager {\r\n    constructor(scene: Phaser.Scene) {}\r\n    loadScenario(name: string): void {}\r\n}\r\nclass GridManager {\r\n    constructor(cols: number, rows: number, cellSize: number) {}\r\n    initializeGrid(scene: Phaser.Scene): void {}\r\n    canPlant(x: number, y: number, plant: string): boolean { return false; }\r\n    getPlantType(x: number, y: number): number { return 0; }\r\n    getGrowthLevel(x: number, y: number): number { return 0; }\r\n    checkWinCondition(amount: number, level: number): boolean { return false; }\r\n}\r\nclass CommandManager {\r\n    executeCommand(command: any): void {}\r\n    undo(): void {}\r\n    redo(): void {}\r\n}\r\nenum PlantTypes {\r\n    NONE = 0,\r\n    CARROTS = 1,\r\n    ROSES = 2,\r\n    CORNS = 3\r\n}\r\nclass AdvanceTimeCommand {}\r\nclass RemovePlantCommand {\r\n    constructor(gridX: number, gridY: number, plantTypeCode: number, growthLevel: number) {}\r\n}\r\nclass PlantCropCommand {\r\n    constructor(gridX: number, gridY: number, selectedPlant: string) {}\r\n}\r\n\r\n// Global victory conditions\r\nlet victory_condition_amount = 9;\r\nlet victory_condition_level = 3;\r\n\r\n// Convert the class to TypeScript\r\nexport class farming extends Phaser.Scene {\r\n    private selectedPlant: string = 'carrots';\r\n    private saveSlots: string[] = ['saveSlot1', 'saveSlot2', 'saveSlot3'];\r\n    private playerSpeed: number = 3.0;\r\n    private dayCount: number = 1;\r\n    private inventory: Record<string, number> = { carrots: 5, roses: 5, corns: 5 };\r\n    private cellSize: number = 70;\r\n    private scenarioManager!: ScenarioManager;\r\n\r\n    private cursors!: Phaser.Types.Input.Keyboard.CursorKeys;\r\n    private wKey!: Phaser.Input.Keyboard.Key;\r\n    private aKey!: Phaser.Input.Keyboard.Key;\r\n    private sKey!: Phaser.Input.Keyboard.Key;\r\n    private dKey!: Phaser.Input.Keyboard.Key;\r\n    private spacebar!: Phaser.Input.Keyboard.Key;\r\n    private eKey!: Phaser.Input.Keyboard.Key;\r\n    private qKey!: Phaser.Input.Keyboard.Key;\r\n    private zKey!: Phaser.Input.Keyboard.Key;\r\n    private xKey!: Phaser.Input.Keyboard.Key;\r\n\r\n    constructor() {\r\n        super(\"farming\");\r\n    }\r\n\r\n    init(): void {\r\n        this.playerSpeed = 3.0;\r\n        this.dayCount = 1;\r\n        this.inventory = {\r\n            carrots: 5,\r\n            roses: 5,\r\n            corns: 5\r\n        };\r\n        this.cellSize = 70;\r\n\r\n        // Initialize the ScenarioManager\r\n        this.scenarioManager = new ScenarioManager(this);\r\n        this.scenarioManager.loadScenario('scenario1');  // Load the TOML scenario file\r\n    }\r\n\r\n    preload(): void {\r\n        this.load.setPath(\"./public/assets/\");\r\n        this.load.image('ground', 'ground_01.png');\r\n        this.load.image('player', 'player_05.png');\r\n\r\n        // Load plant assets using a loop to reduce redundancy\r\n        const plants = ['carrots', 'roses', 'corns'];\r\n        const stages = ['Seedling', 'Growing', 'FullGrown'];\r\n        plants.forEach(plant => {\r\n            stages.forEach(stage => {\r\n                const key = `${plant}${stage}`;\r\n                const filename = this.getAssetFilename(plant, stage);\r\n                this.load.image(key, filename);\r\n            });\r\n        });\r\n    }\r\n\r\n    // Helper method to get asset filenames\r\n    private getAssetFilename(plant: string, stage: string): string {\r\n        const filenames: Record<string, string> = {\r\n            carrotsSeedling: 'tile_0088.png',\r\n            carrotsGrowing: 'tile_0072.png',\r\n            carrotsFullGrown: 'tile_0056.png',\r\n            rosesSeedling: 'tile_0089.png',\r\n            rosesGrowing: 'tile_0073.png',\r\n            rosesFullGrown: 'tile_0057.png',\r\n            cornsSeedling: 'tile_0091.png',\r\n            cornsGrowing: 'tile_0075.png',\r\n            cornsFullGrown: 'tile_0059.png'\r\n        };\r\n        return filenames[`${plant}${stage}`];\r\n    }\r\n\r\n    create(): void {\r\n        // Initialize event manager\r\n        my.eventMan = new EventManager(this);\r\n\r\n        // Initialize grid manager\r\n        const cols = Math.floor(game.config.width / this.cellSize);\r\n        const rows = Math.floor(game.config.height / this.cellSize);\r\n        my.gridManager = new GridManager(cols, rows, this.cellSize);\r\n        my.gridManager.initializeGrid(this);\r\n        \r\n        // Initialize command manager.\r\n        my.commandMan = new CommandManager();\r\n\r\n        // Add a reference to inventory to the global context\r\n        my.inventory = this.inventory;\r\n\r\n        // Add a reference to the scene to the global context\r\n        my.scene = this;\r\n\r\n        // Create ground and player\r\n        this.createGround();\r\n        this.createPlayer();\r\n\r\n        // Draw grid lines\r\n        this.drawGrid(this.cellSize);\r\n\r\n        // Initialize UI elements\r\n        this.initUI();\r\n\r\n        // Set up input controls\r\n        this.setupInput();\r\n\r\n        this.time.addEvent({\r\n            delay: 5000, // 5 seconds\r\n            callback: this.autoSavePrompt,\r\n            callbackScope: this,\r\n            loop: true\r\n        });\r\n\r\n        this.promptContinue();\r\n    }\r\n\r\n    private promptContinue(): void {\r\n        // Check if saveSlot3 exists (this assumes you're using localStorage for persistence)\r\n        if (localStorage.getItem('saveSlot3')) {\r\n            const continueGame = confirm(\"Do you want to continue from where you left off? \");\r\n            if (continueGame) {\r\n                my.eventMan.loadGame('saveSlot3');\r\n                this.updateInventory();\r\n                console.log(\"Game loaded from saveSlot3\");\r\n            } else {\r\n                console.log(\"Starting a new game...\");\r\n            }\r\n        } else {\r\n            console.log(\"No previous save found. Starting a new game...\");\r\n        }\r\n    }\r\n\r\n    // Create ground sprite\r\n    private createGround(): void {\r\n        my.sprite.ground = this.add.sprite(game.config.width / 2, game.config.height / 2, 'ground');\r\n        my.sprite.ground.setScale(23.0);\r\n    }\r\n\r\n    // Create player sprite\r\n    private createPlayer(): void {\r\n        my.sprite.player = this.physics.add.sprite(game.config.width / 2, game.config.height / 2, 'player');\r\n        my.sprite.player.setOrigin(0, 0);\r\n    }\r\n\r\n    // Initialize UI elements\r\n    private initUI(): void {\r\n        const textStyle: Phaser.Types.GameObjects.Text.TextStyle = { fontFamily: 'Arial', fontSize: '32px', color: '#ffffff' };\r\n        my.text.dayCount = this.add.text(10, 10, `Day: ${this.dayCount}`, textStyle);\r\n\r\n        // Inventory text\r\n        this.selectedPlant = 'carrots';\r\n        my.text.inventory = this.add.text(10, 50, 'Inventory:', textStyle);\r\n        my.text.inventoryItems = {\r\n            carrots: this.add.text(180, 50, '', textStyle),\r\n            corns: this.add.text(180, 90, '', textStyle),\r\n            roses: this.add.text(180, 130, '', textStyle)\r\n        };\r\n        this.updateInventory();\r\n\r\n        // Messages\r\n        my.text.message = this.add.text(10, 170, '', { fontFamily: 'Arial', fontSize: '24px', color: '#ff0000' });\r\n        my.text.winMessage = this.add.text(600, 300, '', { fontFamily: 'Arial', fontSize: '42px', color: '#00ff00' });\r\n    }\r\n\r\n    // Set up input controls\r\n    private setupInput(): void {\r\n        // Plant selection keys\r\n        this.input.keyboard!.on('keydown-ONE', () => { this.selectPlant('carrots'); });\r\n        this.input.keyboard!.on('keydown-TWO', () => { this.selectPlant('corns'); });\r\n        this.input.keyboard!.on('keydown-THREE', () => { this.selectPlant('roses'); });\r\n\r\n        // Movement keys\r\n        this.cursors = this.input.keyboard!.createCursorKeys();\r\n        this.wKey = this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.W);\r\n        this.aKey = this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.A);\r\n        this.sKey = this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.S);\r\n        this.dKey = this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.D);\r\n\r\n        // Action keys\r\n        this.spacebar = this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\r\n        this.eKey = this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.E);\r\n        this.qKey = this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.Q);\r\n\r\n        // Undo / redo\r\n        this.zKey = this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.Z);\r\n        this.xKey = this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.X);\r\n\r\n        // Save/load keys\r\n        this.input.keyboard!.on('keydown-K', () => {\r\n            const slot = prompt(\"Enter save slot number (1-3):\");\r\n            if (slot && this.saveSlots.includes(`saveSlot${slot}`)) {\r\n                my.eventMan.saveGame(`saveSlot${slot}`);\r\n            } else {\r\n                console.error(\"Invalid save slot.\");\r\n            }\r\n        });\r\n\r\n        this.input.keyboard!.on('keydown-L', () => {\r\n            const slot = prompt(\"Enter save slot number (1-3):\");\r\n            if (slot && this.saveSlots.includes(`saveSlot${slot}`)) {\r\n                my.eventMan.loadGame(`saveSlot${slot}`);\r\n                this.updateInventory();\r\n            } else {\r\n                console.error(\"Invalid save slot.\");\r\n            }\r\n        });\r\n    }\r\n\r\n    private autoSavePrompt(): void {\r\n        my.eventMan.saveGame('saveSlot3');\r\n        console.log(\"Auto-saved to saveSlot3\");\r\n    }\r\n\r\n    // Select a plant type\r\n    private selectPlant(plant: string): void {\r\n        this.selectedPlant = plant;\r\n        this.updateInventory();\r\n    }\r\n\r\n    // Game loop\r\n    update(): void {\r\n        this.movePlayer();\r\n        this.handleActions();\r\n    }\r\n\r\n    // Handle player actions\r\n    private handleActions(): void {\r\n        this.advanceTime();\r\n        this.pickUpPlant();\r\n        this.plantCrop();\r\n        this.undoKey();\r\n        this.redoKey();\r\n    }\r\n\r\n    // Create a 2D grid over the game\r\n    private drawGrid(cellSize: number): void {\r\n        const graphics = this.add.graphics();\r\n        graphics.lineStyle(1, 0xffffff, 0.2);\r\n\r\n        // Draw vertical and horizontal lines\r\n        for (let x = 0; x < game.config.width; x += cellSize) {\r\n            graphics.strokeLineShape(new Phaser.Geom.Line(x, 0, x, game.config.height));\r\n        }\r\n        for (let y = 0; y < game.config.height; y += cellSize) {\r\n            graphics.strokeLineShape(new Phaser.Geom.Line(0, y, game.config.width, y));\r\n        }\r\n    }\r\n\r\n    // Player movement\r\n    private movePlayer(): void {\r\n        const moveX = (this.aKey.isDown ? -1 : 0) + (this.dKey.isDown ? 1 : 0);\r\n        const moveY = (this.wKey.isDown ? -1 : 0) + (this.sKey.isDown ? 1 : 0);\r\n\r\n        if (my.sprite.player) {\r\n            my.sprite.player.x = Phaser.Math.Clamp(\r\n                my.sprite.player.x + moveX * this.playerSpeed,\r\n                0,\r\n                (this.sys.game.config.width as number) - my.sprite.player.width\r\n            );\r\n            my.sprite.player.y = Phaser.Math.Clamp(\r\n                my.sprite.player.y + moveY * this.playerSpeed,\r\n                0,\r\n                (this.sys.game.config.height as number) - my.sprite.player.height\r\n            );\r\n        }\r\n    }\r\n\r\n    // Picking up plants with the E key\r\n    private pickUpPlant(): void {\r\n        if (Phaser.Input.Keyboard.JustDown(this.eKey)) {\r\n            const { gridX, gridY } = this.getPlayerGridPosition();\r\n            const plantTypeCode = my.gridManager.getPlantType(gridX, gridY);\r\n            const growthLevel = my.gridManager.getGrowthLevel(gridX, gridY);\r\n\r\n            if (plantTypeCode !== PlantTypes.NONE) {\r\n                // Make plant command.\r\n                const command = new RemovePlantCommand(gridX, gridY, plantTypeCode, growthLevel);\r\n                // Execute with CommandManager (also pushes to history stack).\r\n                my.commandMan.executeCommand(command);\r\n\r\n                this.updateInventory();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Plant crops with the Q key\r\n    private plantCrop(): void {\r\n        if (Phaser.Input.Keyboard.JustDown(this.qKey) && this.inventory[this.selectedPlant] > 0) {\r\n            const { gridX, gridY } = this.getPlayerGridPosition();\r\n\r\n            if (my.gridManager.canPlant(gridX, gridY, this.selectedPlant)) {\r\n                // Make plant command\r\n                const command = new PlantCropCommand(gridX, gridY, this.selectedPlant);\r\n                // Execute with CommandManager (also pushes to history stack).\r\n                my.commandMan.executeCommand(command);\r\n                \r\n                this.updateInventory();\r\n                if (my.text.message) {\r\n                    my.text.message.setText('');\r\n                }\r\n            } else {\r\n                if (my.text.message) {\r\n                    my.text.message.setText('Cannot plant here.');\r\n                }\r\n                this.time.delayedCall(3000, () => {\r\n                    if (my.text.message) {\r\n                        my.text.message.setText('');\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    // Advance time in the game with the Spacebar.\r\n    private advanceTime(): void {\r\n        if (Phaser.Input.Keyboard.JustDown(this.spacebar)) {\r\n            const command = new AdvanceTimeCommand();\r\n            my.commandMan.executeCommand(command);\r\n            if (my.gridManager.checkWinCondition(victory_condition_amount, victory_condition_level)) {\r\n                this.winGame();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Undo with Z\r\n    private undoKey(): void {\r\n        if (Phaser.Input.Keyboard.JustDown(this.zKey)) {\r\n            my.commandMan.undo();\r\n            this.updateInventory();\r\n        }\r\n    }\r\n\r\n    // Redo with X\r\n    private redoKey(): void {\r\n        if (Phaser.Input.Keyboard.JustDown(this.xKey)) {\r\n            my.commandMan.redo();\r\n            this.updateInventory();\r\n        }\r\n    }\r\n\r\n    // Update inventory display\r\n    private updateInventory(): void {\r\n        const colors: Record<string, string> = { carrots: '#ffffff', corns: '#ffffff', roses: '#ffffff' };\r\n        colors[this.selectedPlant] = '#aaffaa';\r\n\r\n        for (const [plant, textObj] of Object.entries(my.text.inventoryItems || {})) {\r\n            textObj.setText(`${plant.charAt(0).toUpperCase() + plant.slice(1)}: ${this.inventory[plant]}`);\r\n            textObj.setColor(colors[plant]);\r\n        }\r\n    }\r\n\r\n    // Handle winning the game\r\n    private winGame(): void {\r\n        this.input.keyboard!.enabled = false;\r\n        if (my.text.winMessage) {\r\n            my.text.winMessage.setText('You win!');\r\n        }\r\n\r\n        this.time.delayedCall(2500, () => {\r\n            this.input.keyboard!.enabled = true;\r\n            if (my.text.winMessage) {\r\n                my.text.winMessage.setText('');\r\n            }\r\n            this.scene.restart();\r\n        });\r\n    }\r\n\r\n    // Get player's current grid position\r\n    private getPlayerGridPosition(): { gridX: number; gridY: number } {\r\n        if (my.sprite.player) {\r\n            const playerCenterX = my.sprite.player.x + my.sprite.player.width / 2;\r\n            const playerCenterY = my.sprite.player.y + my.sprite.player.height / 2;\r\n            const gridX = Math.floor(playerCenterX / this.cellSize);\r\n            const gridY = Math.floor(playerCenterY / this.cellSize);\r\n            return { gridX, gridY };\r\n        }\r\n        return { gridX: 0, gridY: 0 };\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","declare const Phaser: typeof import('phaser');\r\n\r\nimport { farming } from '../src/Scenes/farming';\r\n\r\n// Game configuration type\r\ninterface GameConfig extends Phaser.Types.Core.GameConfig {\r\n    parent: string;\r\n    type: number;\r\n    render: {\r\n        pixelArt: boolean;\r\n    };\r\n    physics: {\r\n        default: string;\r\n        arcade: {\r\n            debug: boolean;\r\n            gravity: {\r\n                x: number;\r\n                y: number;\r\n            };\r\n        };\r\n    };\r\n    width: number;\r\n    height: number;\r\n    scene: typeof farming[];\r\n}\r\n\r\n\r\n// Global `my` object type\r\ninterface GlobalContext {\r\n    sprite: Record<string, Phaser.GameObjects.Sprite | Phaser.Physics.Arcade.Sprite>;\r\n    text: Record<string, Phaser.GameObjects.Text>;\r\n    vfx: Record<string, any>;\r\n    grid: Record<string, any>;\r\n    eventMan: Record<string, any>;\r\n    inventory?: Record<string, number>;\r\n    scene?: farming;\r\n    commandMan?: any;\r\n}\r\n\r\nconst my: GlobalContext = {\r\n    sprite: {},\r\n    text: {},\r\n    vfx: {},\r\n    grid: {},\r\n    eventMan: {}\r\n};\r\n\r\n\r\n// Game configuration\r\nconst config: GameConfig = {\r\n    parent: 'phaser-game',\r\n    type: Phaser.CANVAS,\r\n    render: {\r\n        pixelArt: true // prevent pixel art from getting blurred when scaled\r\n    },\r\n    physics: {\r\n        default: 'arcade',\r\n        arcade: {\r\n            debug: true,\r\n            gravity: {\r\n                x: 0,\r\n                y: 0\r\n            }\r\n        }\r\n    },\r\n    width: 1280, // 16:9 aspect ratio\r\n    height: 720, // 16:9 aspect ratio\r\n    scene: [farming]\r\n};\r\n\r\n// Define scale globally for reuse\r\nconst SCALE = 2.0;\r\n\r\n// Create the Phaser game instance\r\nconst game = new Phaser.Game(config);\r\n\r\n\r\n\r\nexport { SCALE, game, my};\r\n"],"names":[],"sourceRoot":""}